version: "3.8"

# Production compose using Docker secrets. Secrets are mounted into containers
# at /run/secrets/<name>. Services and the application must read secrets from
# those files (or use the *_FILE convention supported by some official images).

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: relevantic_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-relevantic_recall}
      POSTGRES_USER: ${DB_USER:-relevantic_user}
      # The official postgres image supports the *_FILE pattern; the password
      # will be read from /run/secrets/db_password at container start.
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      PGPASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - relevantic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-relevantic_user} -d ${DB_NAME:-relevantic_recall}"]
      interval: 30s
      timeout: 10s
      retries: 3

  neo4j:
    image: neo4j:5.15
    container_name: relevantic_neo4j_prod
    environment:
      # Neo4j doesn't directly support a NEO4J_AUTH_FILE var; we mount the
      # secret and set auth at runtime. The healthcheck below reads the secret
      # file when executed in a shell.
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    secrets:
      - neo4j_password
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - relevantic_network
    healthcheck:
      # Uses a shell to read the secret file at /run/secrets/neo4j_password
      test: ["CMD-SHELL", "cypher-shell -u ${NEO4J_USER:-neo4j} -p \"$(cat /run/secrets/neo4j_password)\" 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: relevantic_app_prod
    environment:
      # In production the app should read secrets (DB password, Neo4j password,
      # API keys, SECRET_KEY) from the files under /run/secrets. You can also
      # use a small entrypoint script to compose DATABASE_URL from the secret
      # files before running the application.
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - DEBUG=false
    secrets:
      - db_password
      - neo4j_password
      - app_secret_key
      - openai_api_key
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - relevantic_network
    volumes:
      - ./logs:/app/logs:rw
    restart: unless-stopped

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:

networks:
  relevantic_network:
    driver: bridge

secrets:
  db_password:
    file: ./secrets/db_password
  neo4j_password:
    file: ./secrets/neo4j_password
  app_secret_key:
    file: ./secrets/secret_key
  openai_api_key:
    file: ./secrets/openai_api_key
